using Microsoft.Reporting.WebForms;
using System;
using System.Collections.Generic;

namespace NewCaresPlusMvc.Models
{
    public class ReportViewModel
    {
        public enum ReportFormat { Pdf = 1, Word = 2, Excel = 3 }

        public ReportViewModel()
        {
            //DataSet holder
            ReportDataSets = new List<ReportDataSet>();
        }

        //Name of the report
        public string Name { get; set; }

        //Language of the report
        public string ReportLanguage { get; set; }

        //Reference to the RDLC file that contain the report definition
        public string FileName { get; set; }

        //The main title for the report
        public string ReportTitle { get; set; }

        //The left subtitle for the report
        public string ReportLeftSubTitle { get; set; }

        //The url for the logo, 
        public string ReportLogo { get; set; }

        //Date for printing the report
        public DateTime ReportDateTime { get; set; }

        //Reporty Generated By 
        public string ReportBy { get; set; }

        //DataSet holder
        public List<ReportDataSet> ReportDataSets { get; set; }

        public bool IsSubReportPresent { get; set; }

        //Report format needed
        public ReportFormat Format { get; set; }
        public bool ViewAsAttachment { get; set; }

        //A helper class to store the data for each report data set
        public class ReportDataSet
        {
            public string DataSetName { get; set; }
            public List<object> DataSetData { get; set; }
        }

        public string ReportExportFileName
        {
            get
            {
                return string.Format("{0}{1}", Name, ReportExportExtension);
            }
        }

        public string ReportExportExtension
        {
            get
            {
                switch (Format)
                {
                    case ReportFormat.Word: return ".doc";
                    case ReportFormat.Excel: return ".xls";
                    default:
                        return ".pdf";
                }
            }
        }

        public string LastmimeType
        {
            get
            {
                return _mimeType;
            }
        }

        private string _mimeType;

        public byte[] RenderReport()
        {
            //Geting report data from the business object

            //creating a new report and setting its path
            var localReport = new LocalReport { ReportPath = FileName };

            //adding the report datasets with their names
            foreach (var dataset in ReportDataSets)
            {
                var reportDataSource = new ReportDataSource(dataset.DataSetName, dataset.DataSetData);
                localReport.DataSources.Add(reportDataSource);
            }

            //enabeling external images
            localReport.EnableExternalImages = true;

            //if (IsSubReportPresent)
            //    localReport.SubreportProcessing += localReport_SubreportProcessing;

            //seting the partameters for the report
            //localReport.SetParameters(new ReportParameter("ReportLeftSubTitle", ReportLeftSubTitle));
            //localReport.SetParameters(new ReportParameter("ReportTitle", ReportTitle));
            //localReport.SetParameters(new ReportParameter("ReportLogo", ReportLogo));
            //localReport.SetParameters(new ReportParameter("ReportBy", ReportBy));
            //localReport.SetParameters(new ReportParameter("ReportDateTime", ReportDateTime.ToString("MMMM dd, yyyy H:mm:ss")));

            //preparing to render the report
            var reportType = Format.ToString();

            string encoding;
            string fileNameExtension;

            //The DeviceInfo settings should be changed based on the reportType
            //http://msdn2.microsoft.com/en-us/library/ms155397.aspx
            var deviceInfo =
            "<DeviceInfo>" +
            "  <OutputFormat>" + Format + "</OutputFormat>" +
            "</DeviceInfo>";

            Warning[] warnings;
            string[] streams;

            //Render the report
            var renderedBytes = localReport.Render(
                reportType,
                deviceInfo,
                out _mimeType,
                out encoding,
                out fileNameExtension,
                out streams,
                out warnings);

            return renderedBytes;
        }

        //void localReport_SubreportProcessing(object sender, SubreportProcessingEventArgs e)
        //{
        //    switch (e.ReportPath)
        //    {
        //case "UsersSubReport":
        //    {
        //        List<UsersReportDto> usersReportDtos =
        //            (((LocalReport)sender).DataSources["CamperEmergencyReportDS"].Value as List<Object>).Cast<CamperEmergencyReportDTO>().ToList();

        //        var camperId = int.Parse(e.Parameters["CAMPER_ID"].Values.First());

        //        List<ParentReportDTO> parentReportDTOs = camperEmergencyReportDTOs.SingleOrDefault(s => s.CAMPER_ID == camperId)
        //            .Parents;

        //        e.DataSources.Add(new ReportDataSource("CamperEmergencyParentSubReportDS", parentReportDTOs));

        //        break;
        //    }
        //    }
        //}
    }
}